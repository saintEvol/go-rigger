// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: rigger/protos.proto

package rigger

import (
	bytes "bytes"
	fmt "fmt"
	actor "github.com/AsynkronIT/protoactor-go/actor"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	reflect "reflect"
	strings "strings"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

// 表示Rigger通用错误, 可以跨节点传递,因此可以用来表示进程间消息处理的错误
type Error struct {
	ErrStr string `protobuf:"bytes,1,opt,name=errStr,proto3" json:"errStr,omitempty"`
}

func (m *Error) Reset()      { *m = Error{} }
func (*Error) ProtoMessage() {}
func (*Error) Descriptor() ([]byte, []int) {
	return fileDescriptor_f5a1f10097eb08ff, []int{0}
}
func (m *Error) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Error) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Error.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Error) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Error.Merge(m, src)
}
func (m *Error) XXX_Size() int {
	return m.Size()
}
func (m *Error) XXX_DiscardUnknown() {
	xxx_messageInfo_Error.DiscardUnknown(m)
}

var xxx_messageInfo_Error proto.InternalMessageInfo

func (m *Error) GetErrStr() string {
	if m != nil {
		return m.ErrStr
	}
	return ""
}

// 用于远程启动子进程的命令
type RemoteStartChildCmd struct {
	SpecOrArgs []byte `protobuf:"bytes,1,opt,name=specOrArgs,proto3" json:"specOrArgs,omitempty"`
}

func (m *RemoteStartChildCmd) Reset()      { *m = RemoteStartChildCmd{} }
func (*RemoteStartChildCmd) ProtoMessage() {}
func (*RemoteStartChildCmd) Descriptor() ([]byte, []int) {
	return fileDescriptor_f5a1f10097eb08ff, []int{1}
}
func (m *RemoteStartChildCmd) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RemoteStartChildCmd) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RemoteStartChildCmd.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RemoteStartChildCmd) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RemoteStartChildCmd.Merge(m, src)
}
func (m *RemoteStartChildCmd) XXX_Size() int {
	return m.Size()
}
func (m *RemoteStartChildCmd) XXX_DiscardUnknown() {
	xxx_messageInfo_RemoteStartChildCmd.DiscardUnknown(m)
}

var xxx_messageInfo_RemoteStartChildCmd proto.InternalMessageInfo

func (m *RemoteStartChildCmd) GetSpecOrArgs() []byte {
	if m != nil {
		return m.SpecOrArgs
	}
	return nil
}

// 表示成功的回复
type OkResp struct {
}

func (m *OkResp) Reset()      { *m = OkResp{} }
func (*OkResp) ProtoMessage() {}
func (*OkResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_f5a1f10097eb08ff, []int{2}
}
func (m *OkResp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *OkResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_OkResp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *OkResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_OkResp.Merge(m, src)
}
func (m *OkResp) XXX_Size() int {
	return m.Size()
}
func (m *OkResp) XXX_DiscardUnknown() {
	xxx_messageInfo_OkResp.DiscardUnknown(m)
}

var xxx_messageInfo_OkResp proto.InternalMessageInfo

// 表示出错的回复
type ErrorResp struct {
	Error string `protobuf:"bytes,1,opt,name=error,proto3" json:"error,omitempty"`
}

func (m *ErrorResp) Reset()      { *m = ErrorResp{} }
func (*ErrorResp) ProtoMessage() {}
func (*ErrorResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_f5a1f10097eb08ff, []int{3}
}
func (m *ErrorResp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ErrorResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ErrorResp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ErrorResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ErrorResp.Merge(m, src)
}
func (m *ErrorResp) XXX_Size() int {
	return m.Size()
}
func (m *ErrorResp) XXX_DiscardUnknown() {
	xxx_messageInfo_ErrorResp.DiscardUnknown(m)
}

var xxx_messageInfo_ErrorResp proto.InternalMessageInfo

func (m *ErrorResp) GetError() string {
	if m != nil {
		return m.Error
	}
	return ""
}

// 起进程回复
type SpawnResponse struct {
	Sender *actor.PID `protobuf:"bytes,1,opt,name=sender,proto3" json:"sender,omitempty"`
	Parent *actor.PID `protobuf:"bytes,2,opt,name=parent,proto3" json:"parent,omitempty"`
	Pid    *actor.PID `protobuf:"bytes,3,opt,name=pid,proto3" json:"pid,omitempty"`
	Error  string     `protobuf:"bytes,4,opt,name=error,proto3" json:"error,omitempty"`
}

func (m *SpawnResponse) Reset()      { *m = SpawnResponse{} }
func (*SpawnResponse) ProtoMessage() {}
func (*SpawnResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_f5a1f10097eb08ff, []int{4}
}
func (m *SpawnResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SpawnResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SpawnResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SpawnResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SpawnResponse.Merge(m, src)
}
func (m *SpawnResponse) XXX_Size() int {
	return m.Size()
}
func (m *SpawnResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_SpawnResponse.DiscardUnknown(m)
}

var xxx_messageInfo_SpawnResponse proto.InternalMessageInfo

func (m *SpawnResponse) GetSender() *actor.PID {
	if m != nil {
		return m.Sender
	}
	return nil
}

func (m *SpawnResponse) GetParent() *actor.PID {
	if m != nil {
		return m.Parent
	}
	return nil
}

func (m *SpawnResponse) GetPid() *actor.PID {
	if m != nil {
		return m.Pid
	}
	return nil
}

func (m *SpawnResponse) GetError() string {
	if m != nil {
		return m.Error
	}
	return ""
}

type SpawnLoacalApplicationSpec struct {
	LaunchConfigPath      string `protobuf:"bytes,1,opt,name=launchConfigPath,proto3" json:"launchConfigPath,omitempty"`
	ApplicationConfigPath string `protobuf:"bytes,2,opt,name=applicationConfigPath,proto3" json:"applicationConfigPath,omitempty"`
	ApplicationId         string `protobuf:"bytes,3,opt,name=applicationId,proto3" json:"applicationId,omitempty"`
}

func (m *SpawnLoacalApplicationSpec) Reset()      { *m = SpawnLoacalApplicationSpec{} }
func (*SpawnLoacalApplicationSpec) ProtoMessage() {}
func (*SpawnLoacalApplicationSpec) Descriptor() ([]byte, []int) {
	return fileDescriptor_f5a1f10097eb08ff, []int{5}
}
func (m *SpawnLoacalApplicationSpec) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SpawnLoacalApplicationSpec) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SpawnLoacalApplicationSpec.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SpawnLoacalApplicationSpec) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SpawnLoacalApplicationSpec.Merge(m, src)
}
func (m *SpawnLoacalApplicationSpec) XXX_Size() int {
	return m.Size()
}
func (m *SpawnLoacalApplicationSpec) XXX_DiscardUnknown() {
	xxx_messageInfo_SpawnLoacalApplicationSpec.DiscardUnknown(m)
}

var xxx_messageInfo_SpawnLoacalApplicationSpec proto.InternalMessageInfo

func (m *SpawnLoacalApplicationSpec) GetLaunchConfigPath() string {
	if m != nil {
		return m.LaunchConfigPath
	}
	return ""
}

func (m *SpawnLoacalApplicationSpec) GetApplicationConfigPath() string {
	if m != nil {
		return m.ApplicationConfigPath
	}
	return ""
}

func (m *SpawnLoacalApplicationSpec) GetApplicationId() string {
	if m != nil {
		return m.ApplicationId
	}
	return ""
}

type SpawnLocalApplicationResp struct {
	Error string `protobuf:"bytes,1,opt,name=error,proto3" json:"error,omitempty"`
}

func (m *SpawnLocalApplicationResp) Reset()      { *m = SpawnLocalApplicationResp{} }
func (*SpawnLocalApplicationResp) ProtoMessage() {}
func (*SpawnLocalApplicationResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_f5a1f10097eb08ff, []int{6}
}
func (m *SpawnLocalApplicationResp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SpawnLocalApplicationResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SpawnLocalApplicationResp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SpawnLocalApplicationResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SpawnLocalApplicationResp.Merge(m, src)
}
func (m *SpawnLocalApplicationResp) XXX_Size() int {
	return m.Size()
}
func (m *SpawnLocalApplicationResp) XXX_DiscardUnknown() {
	xxx_messageInfo_SpawnLocalApplicationResp.DiscardUnknown(m)
}

var xxx_messageInfo_SpawnLocalApplicationResp proto.InternalMessageInfo

func (m *SpawnLocalApplicationResp) GetError() string {
	if m != nil {
		return m.Error
	}
	return ""
}

type HotUpdateSpec struct {
}

func (m *HotUpdateSpec) Reset()      { *m = HotUpdateSpec{} }
func (*HotUpdateSpec) ProtoMessage() {}
func (*HotUpdateSpec) Descriptor() ([]byte, []int) {
	return fileDescriptor_f5a1f10097eb08ff, []int{7}
}
func (m *HotUpdateSpec) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *HotUpdateSpec) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_HotUpdateSpec.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *HotUpdateSpec) XXX_Merge(src proto.Message) {
	xxx_messageInfo_HotUpdateSpec.Merge(m, src)
}
func (m *HotUpdateSpec) XXX_Size() int {
	return m.Size()
}
func (m *HotUpdateSpec) XXX_DiscardUnknown() {
	xxx_messageInfo_HotUpdateSpec.DiscardUnknown(m)
}

var xxx_messageInfo_HotUpdateSpec proto.InternalMessageInfo

func init() {
	proto.RegisterType((*Error)(nil), "rigger.Error")
	proto.RegisterType((*RemoteStartChildCmd)(nil), "rigger.RemoteStartChildCmd")
	proto.RegisterType((*OkResp)(nil), "rigger.OkResp")
	proto.RegisterType((*ErrorResp)(nil), "rigger.ErrorResp")
	proto.RegisterType((*SpawnResponse)(nil), "rigger.SpawnResponse")
	proto.RegisterType((*SpawnLoacalApplicationSpec)(nil), "rigger.SpawnLoacalApplicationSpec")
	proto.RegisterType((*SpawnLocalApplicationResp)(nil), "rigger.SpawnLocalApplicationResp")
	proto.RegisterType((*HotUpdateSpec)(nil), "rigger.hotUpdateSpec")
}

func init() { proto.RegisterFile("rigger/protos.proto", fileDescriptor_f5a1f10097eb08ff) }

var fileDescriptor_f5a1f10097eb08ff = []byte{
	// 404 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x7c, 0x52, 0xbf, 0x8e, 0xd3, 0x30,
	0x18, 0x8f, 0x5b, 0x1a, 0xd1, 0x0f, 0x2a, 0x90, 0x0b, 0xa8, 0x54, 0xc8, 0x40, 0xc4, 0x80, 0x90,
	0x48, 0x05, 0x14, 0xf6, 0x52, 0x18, 0x2a, 0x21, 0xb5, 0x4a, 0xe0, 0x01, 0xdc, 0xc4, 0x24, 0x51,
	0x53, 0xdb, 0x72, 0x5c, 0x21, 0x36, 0x76, 0x96, 0x7b, 0x88, 0x1b, 0xee, 0x51, 0x6e, 0xec, 0xd8,
	0xf1, 0x9a, 0x2e, 0x37, 0xf6, 0x11, 0x4e, 0x71, 0x22, 0x35, 0x55, 0x4f, 0x37, 0xd9, 0xbf, 0x7f,
	0xfa, 0x7e, 0x9f, 0x65, 0xe8, 0xaa, 0x24, 0x8a, 0x98, 0x1a, 0x48, 0x25, 0xb4, 0xc8, 0x5c, 0x73,
	0x60, 0xbb, 0x24, 0xfb, 0x5f, 0xa2, 0x44, 0xc7, 0xab, 0xb9, 0x1b, 0x88, 0xe5, 0x60, 0x94, 0xfd,
	0xe5, 0x0b, 0x25, 0xf8, 0xe4, 0x67, 0xe9, 0xa5, 0x81, 0x16, 0xea, 0x7d, 0x24, 0x06, 0xe6, 0x72,
	0x94, 0x77, 0x5e, 0x42, 0xeb, 0xbb, 0x52, 0x42, 0xe1, 0x67, 0x60, 0x33, 0xa5, 0x7c, 0xad, 0x7a,
	0xe8, 0x15, 0x7a, 0xdb, 0xf6, 0x2a, 0xe4, 0x7c, 0x86, 0xae, 0xc7, 0x96, 0x42, 0x33, 0x5f, 0x53,
	0xa5, 0xc7, 0x71, 0x92, 0x86, 0xe3, 0x65, 0x88, 0x09, 0x40, 0x26, 0x59, 0x30, 0x55, 0x23, 0x15,
	0x65, 0x26, 0xf2, 0xd0, 0xab, 0x31, 0xce, 0x7d, 0xb0, 0xa7, 0x0b, 0x8f, 0x65, 0xd2, 0x79, 0x0d,
	0x6d, 0x33, 0xa1, 0x00, 0xf8, 0x09, 0xb4, 0x58, 0x01, 0xaa, 0x21, 0x25, 0x70, 0xfe, 0x23, 0xe8,
	0xf8, 0x92, 0xfe, 0xe1, 0x85, 0x47, 0xf0, 0x8c, 0x61, 0x07, 0xec, 0x8c, 0xf1, 0x90, 0x95, 0xc6,
	0x07, 0x1f, 0xc1, 0x35, 0xdd, 0xdd, 0xd9, 0xe4, 0x9b, 0x57, 0x29, 0x85, 0x47, 0x52, 0xc5, 0xb8,
	0xee, 0x35, 0x4e, 0x3d, 0xa5, 0x82, 0x5f, 0x40, 0x53, 0x26, 0x61, 0xaf, 0x79, 0x62, 0x28, 0xe8,
	0x43, 0x9b, 0x7b, 0xf5, 0x36, 0xe7, 0x08, 0xfa, 0xa6, 0xcd, 0x0f, 0x41, 0x03, 0x9a, 0x8e, 0xa4,
	0x4c, 0x93, 0x80, 0xea, 0x44, 0x70, 0x5f, 0xb2, 0x00, 0xbf, 0x83, 0xc7, 0x29, 0x5d, 0xf1, 0x20,
	0x1e, 0x0b, 0xfe, 0x3b, 0x89, 0x66, 0x54, 0xc7, 0xd5, 0x36, 0x27, 0x3c, 0x1e, 0xc2, 0x53, 0x7a,
	0x88, 0xd7, 0x02, 0x0d, 0x13, 0xb8, 0x5d, 0xc4, 0x6f, 0xa0, 0x53, 0x13, 0x26, 0x65, 0xfd, 0xb6,
	0x77, 0x4c, 0x3a, 0x1f, 0xe0, 0x79, 0xd5, 0xf2, 0xb8, 0xe4, 0x1d, 0xef, 0xfc, 0x08, 0x3a, 0xb1,
	0xd0, 0xbf, 0x64, 0x48, 0x35, 0x2b, 0x76, 0xf9, 0x3a, 0x5c, 0x6f, 0x89, 0xb5, 0xd9, 0x12, 0x6b,
	0xbf, 0x25, 0xe8, 0x5f, 0x4e, 0xd0, 0x45, 0x4e, 0xd0, 0x65, 0x4e, 0xd0, 0x3a, 0x27, 0xe8, 0x2a,
	0x27, 0xe8, 0x3a, 0x27, 0xd6, 0x3e, 0x27, 0xe8, 0x6c, 0x47, 0xac, 0xf5, 0x8e, 0x58, 0x9b, 0x1d,
	0xb1, 0xe6, 0xb6, 0xf9, 0x3a, 0x9f, 0x6e, 0x02, 0x00, 0x00, 0xff, 0xff, 0x48, 0x4d, 0x15, 0x46,
	0x91, 0x02, 0x00, 0x00,
}

func (this *Error) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Error)
	if !ok {
		that2, ok := that.(Error)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.ErrStr != that1.ErrStr {
		return false
	}
	return true
}
func (this *RemoteStartChildCmd) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RemoteStartChildCmd)
	if !ok {
		that2, ok := that.(RemoteStartChildCmd)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !bytes.Equal(this.SpecOrArgs, that1.SpecOrArgs) {
		return false
	}
	return true
}
func (this *OkResp) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*OkResp)
	if !ok {
		that2, ok := that.(OkResp)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	return true
}
func (this *ErrorResp) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ErrorResp)
	if !ok {
		that2, ok := that.(ErrorResp)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Error != that1.Error {
		return false
	}
	return true
}
func (this *SpawnResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*SpawnResponse)
	if !ok {
		that2, ok := that.(SpawnResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Sender.Equal(that1.Sender) {
		return false
	}
	if !this.Parent.Equal(that1.Parent) {
		return false
	}
	if !this.Pid.Equal(that1.Pid) {
		return false
	}
	if this.Error != that1.Error {
		return false
	}
	return true
}
func (this *SpawnLoacalApplicationSpec) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*SpawnLoacalApplicationSpec)
	if !ok {
		that2, ok := that.(SpawnLoacalApplicationSpec)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.LaunchConfigPath != that1.LaunchConfigPath {
		return false
	}
	if this.ApplicationConfigPath != that1.ApplicationConfigPath {
		return false
	}
	if this.ApplicationId != that1.ApplicationId {
		return false
	}
	return true
}
func (this *SpawnLocalApplicationResp) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*SpawnLocalApplicationResp)
	if !ok {
		that2, ok := that.(SpawnLocalApplicationResp)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Error != that1.Error {
		return false
	}
	return true
}
func (this *HotUpdateSpec) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*HotUpdateSpec)
	if !ok {
		that2, ok := that.(HotUpdateSpec)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	return true
}
func (this *Error) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&rigger.Error{")
	s = append(s, "ErrStr: "+fmt.Sprintf("%#v", this.ErrStr)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *RemoteStartChildCmd) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&rigger.RemoteStartChildCmd{")
	s = append(s, "SpecOrArgs: "+fmt.Sprintf("%#v", this.SpecOrArgs)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *OkResp) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 4)
	s = append(s, "&rigger.OkResp{")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ErrorResp) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&rigger.ErrorResp{")
	s = append(s, "Error: "+fmt.Sprintf("%#v", this.Error)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *SpawnResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 8)
	s = append(s, "&rigger.SpawnResponse{")
	if this.Sender != nil {
		s = append(s, "Sender: "+fmt.Sprintf("%#v", this.Sender)+",\n")
	}
	if this.Parent != nil {
		s = append(s, "Parent: "+fmt.Sprintf("%#v", this.Parent)+",\n")
	}
	if this.Pid != nil {
		s = append(s, "Pid: "+fmt.Sprintf("%#v", this.Pid)+",\n")
	}
	s = append(s, "Error: "+fmt.Sprintf("%#v", this.Error)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *SpawnLoacalApplicationSpec) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&rigger.SpawnLoacalApplicationSpec{")
	s = append(s, "LaunchConfigPath: "+fmt.Sprintf("%#v", this.LaunchConfigPath)+",\n")
	s = append(s, "ApplicationConfigPath: "+fmt.Sprintf("%#v", this.ApplicationConfigPath)+",\n")
	s = append(s, "ApplicationId: "+fmt.Sprintf("%#v", this.ApplicationId)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *SpawnLocalApplicationResp) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&rigger.SpawnLocalApplicationResp{")
	s = append(s, "Error: "+fmt.Sprintf("%#v", this.Error)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *HotUpdateSpec) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 4)
	s = append(s, "&rigger.HotUpdateSpec{")
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringProtos(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}
func (m *Error) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Error) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.ErrStr) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintProtos(dAtA, i, uint64(len(m.ErrStr)))
		i += copy(dAtA[i:], m.ErrStr)
	}
	return i, nil
}

func (m *RemoteStartChildCmd) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RemoteStartChildCmd) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.SpecOrArgs) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintProtos(dAtA, i, uint64(len(m.SpecOrArgs)))
		i += copy(dAtA[i:], m.SpecOrArgs)
	}
	return i, nil
}

func (m *OkResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *OkResp) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func (m *ErrorResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ErrorResp) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Error) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintProtos(dAtA, i, uint64(len(m.Error)))
		i += copy(dAtA[i:], m.Error)
	}
	return i, nil
}

func (m *SpawnResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SpawnResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Sender != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintProtos(dAtA, i, uint64(m.Sender.Size()))
		n1, err := m.Sender.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n1
	}
	if m.Parent != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintProtos(dAtA, i, uint64(m.Parent.Size()))
		n2, err := m.Parent.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n2
	}
	if m.Pid != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintProtos(dAtA, i, uint64(m.Pid.Size()))
		n3, err := m.Pid.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n3
	}
	if len(m.Error) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintProtos(dAtA, i, uint64(len(m.Error)))
		i += copy(dAtA[i:], m.Error)
	}
	return i, nil
}

func (m *SpawnLoacalApplicationSpec) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SpawnLoacalApplicationSpec) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.LaunchConfigPath) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintProtos(dAtA, i, uint64(len(m.LaunchConfigPath)))
		i += copy(dAtA[i:], m.LaunchConfigPath)
	}
	if len(m.ApplicationConfigPath) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintProtos(dAtA, i, uint64(len(m.ApplicationConfigPath)))
		i += copy(dAtA[i:], m.ApplicationConfigPath)
	}
	if len(m.ApplicationId) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintProtos(dAtA, i, uint64(len(m.ApplicationId)))
		i += copy(dAtA[i:], m.ApplicationId)
	}
	return i, nil
}

func (m *SpawnLocalApplicationResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SpawnLocalApplicationResp) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Error) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintProtos(dAtA, i, uint64(len(m.Error)))
		i += copy(dAtA[i:], m.Error)
	}
	return i, nil
}

func (m *HotUpdateSpec) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *HotUpdateSpec) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func encodeVarintProtos(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *Error) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ErrStr)
	if l > 0 {
		n += 1 + l + sovProtos(uint64(l))
	}
	return n
}

func (m *RemoteStartChildCmd) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.SpecOrArgs)
	if l > 0 {
		n += 1 + l + sovProtos(uint64(l))
	}
	return n
}

func (m *OkResp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *ErrorResp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Error)
	if l > 0 {
		n += 1 + l + sovProtos(uint64(l))
	}
	return n
}

func (m *SpawnResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Sender != nil {
		l = m.Sender.Size()
		n += 1 + l + sovProtos(uint64(l))
	}
	if m.Parent != nil {
		l = m.Parent.Size()
		n += 1 + l + sovProtos(uint64(l))
	}
	if m.Pid != nil {
		l = m.Pid.Size()
		n += 1 + l + sovProtos(uint64(l))
	}
	l = len(m.Error)
	if l > 0 {
		n += 1 + l + sovProtos(uint64(l))
	}
	return n
}

func (m *SpawnLoacalApplicationSpec) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.LaunchConfigPath)
	if l > 0 {
		n += 1 + l + sovProtos(uint64(l))
	}
	l = len(m.ApplicationConfigPath)
	if l > 0 {
		n += 1 + l + sovProtos(uint64(l))
	}
	l = len(m.ApplicationId)
	if l > 0 {
		n += 1 + l + sovProtos(uint64(l))
	}
	return n
}

func (m *SpawnLocalApplicationResp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Error)
	if l > 0 {
		n += 1 + l + sovProtos(uint64(l))
	}
	return n
}

func (m *HotUpdateSpec) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func sovProtos(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozProtos(x uint64) (n int) {
	return sovProtos(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *Error) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Error{`,
		`ErrStr:` + fmt.Sprintf("%v", this.ErrStr) + `,`,
		`}`,
	}, "")
	return s
}
func (this *RemoteStartChildCmd) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&RemoteStartChildCmd{`,
		`SpecOrArgs:` + fmt.Sprintf("%v", this.SpecOrArgs) + `,`,
		`}`,
	}, "")
	return s
}
func (this *OkResp) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&OkResp{`,
		`}`,
	}, "")
	return s
}
func (this *ErrorResp) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ErrorResp{`,
		`Error:` + fmt.Sprintf("%v", this.Error) + `,`,
		`}`,
	}, "")
	return s
}
func (this *SpawnResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&SpawnResponse{`,
		`Sender:` + strings.Replace(fmt.Sprintf("%v", this.Sender), "PID", "actor.PID", 1) + `,`,
		`Parent:` + strings.Replace(fmt.Sprintf("%v", this.Parent), "PID", "actor.PID", 1) + `,`,
		`Pid:` + strings.Replace(fmt.Sprintf("%v", this.Pid), "PID", "actor.PID", 1) + `,`,
		`Error:` + fmt.Sprintf("%v", this.Error) + `,`,
		`}`,
	}, "")
	return s
}
func (this *SpawnLoacalApplicationSpec) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&SpawnLoacalApplicationSpec{`,
		`LaunchConfigPath:` + fmt.Sprintf("%v", this.LaunchConfigPath) + `,`,
		`ApplicationConfigPath:` + fmt.Sprintf("%v", this.ApplicationConfigPath) + `,`,
		`ApplicationId:` + fmt.Sprintf("%v", this.ApplicationId) + `,`,
		`}`,
	}, "")
	return s
}
func (this *SpawnLocalApplicationResp) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&SpawnLocalApplicationResp{`,
		`Error:` + fmt.Sprintf("%v", this.Error) + `,`,
		`}`,
	}, "")
	return s
}
func (this *HotUpdateSpec) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&HotUpdateSpec{`,
		`}`,
	}, "")
	return s
}
func valueToStringProtos(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *Error) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowProtos
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Error: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Error: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ErrStr", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtos
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthProtos
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthProtos
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ErrStr = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipProtos(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthProtos
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthProtos
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RemoteStartChildCmd) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowProtos
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RemoteStartChildCmd: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RemoteStartChildCmd: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SpecOrArgs", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtos
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthProtos
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthProtos
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SpecOrArgs = append(m.SpecOrArgs[:0], dAtA[iNdEx:postIndex]...)
			if m.SpecOrArgs == nil {
				m.SpecOrArgs = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipProtos(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthProtos
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthProtos
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *OkResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowProtos
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: OkResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: OkResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipProtos(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthProtos
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthProtos
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ErrorResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowProtos
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ErrorResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ErrorResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Error", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtos
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthProtos
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthProtos
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Error = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipProtos(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthProtos
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthProtos
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SpawnResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowProtos
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SpawnResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SpawnResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sender", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtos
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthProtos
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthProtos
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Sender == nil {
				m.Sender = &actor.PID{}
			}
			if err := m.Sender.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Parent", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtos
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthProtos
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthProtos
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Parent == nil {
				m.Parent = &actor.PID{}
			}
			if err := m.Parent.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pid", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtos
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthProtos
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthProtos
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pid == nil {
				m.Pid = &actor.PID{}
			}
			if err := m.Pid.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Error", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtos
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthProtos
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthProtos
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Error = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipProtos(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthProtos
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthProtos
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SpawnLoacalApplicationSpec) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowProtos
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SpawnLoacalApplicationSpec: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SpawnLoacalApplicationSpec: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LaunchConfigPath", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtos
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthProtos
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthProtos
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LaunchConfigPath = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ApplicationConfigPath", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtos
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthProtos
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthProtos
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ApplicationConfigPath = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ApplicationId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtos
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthProtos
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthProtos
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ApplicationId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipProtos(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthProtos
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthProtos
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SpawnLocalApplicationResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowProtos
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SpawnLocalApplicationResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SpawnLocalApplicationResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Error", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtos
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthProtos
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthProtos
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Error = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipProtos(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthProtos
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthProtos
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *HotUpdateSpec) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowProtos
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: hotUpdateSpec: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: hotUpdateSpec: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipProtos(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthProtos
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthProtos
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipProtos(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowProtos
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowProtos
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowProtos
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthProtos
			}
			iNdEx += length
			if iNdEx < 0 {
				return 0, ErrInvalidLengthProtos
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowProtos
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipProtos(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
				if iNdEx < 0 {
					return 0, ErrInvalidLengthProtos
				}
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthProtos = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowProtos   = fmt.Errorf("proto: integer overflow")
)
