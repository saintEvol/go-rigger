syntax = "proto3";
import "github.com/AsynkronIT/protoactor-go/actor/protos.proto";
package rigger;

// 表示Rigger通用错误, 可以跨节点传递,因此可以用来表示进程间消息处理的错误
message Error {
    string errStr = 1;
}

// 用于远程启动子进程的命令
message RemoteStartChildCmd {
    bytes spawnSpecBytes = 1;
}

// 表示成功的回复
message OkResp {

}

// 表示出错的回复
message ErrorResp {
    string error = 1;
}

// 起进程回复
message SpawnResponse {
    actor.PID sender = 1;
    actor.PID parent = 2;
    actor.PID pid = 3;
    string error = 4;
}

message SpawnLoacalApplicationSpec {
    string launchConfigPath = 1;
    string applicationConfigPath = 2;
    string applicationId = 3;
}

message SpawnLocalApplicationResp {
    string error = 1;
}

message hotUpdateSpec {

}

message GetPidRequest {
    string name = 1;
}

message GetPidResponse {
    actor.PID pid = 1;
}

message RegisterGlobalProcessRequest {
    string name = 1;
    actor.PID pid = 2;
}

message ResetRequest {
    repeated RegisterGlobalProcessRequest pids = 1;
}

message GlobalProcess {
    string name = 1;
    actor.PID pid = 2;
}

message GlobalProcessList {
    repeated GlobalProcess list = 1;
}

message Noop {
}

message SyncAllOthersRequest {
    string exception = 1; // 需要排除的节点(地址, 格式: host:port)
}

message JoinRequest {
    string node = 1;
    actor.PID pid = 2;
}

message JoinResponse {
    actor.PID pid = 1;
}

// 全局管理网关,负责接受跨节点请求
service GlobalManagingGateway {
  rpc GetPid(GetPidRequest) returns (GetPidResponse) {} // 通过进程名字获取全局进程ID
  rpc Register(RegisterGlobalProcessRequest) returns (Noop) {} // 注册一个全局进程
  rpc Join(JoinRequest) returns (JoinResponse) {} // 节点加入
  // 暂时未支持流 TODO
  rpc Reset(ResetRequest) returns (Noop) {} //重置,重新将本节点的所有全局进程推送给管理进程
    // 暂未支持流
  rpc SyncAllOthers(SyncAllOthersRequest) returns (GlobalProcessList) {} // 同步所有其它节点的全局进程(不包含本节点的)
}

